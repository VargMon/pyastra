#!/usr/bin/python
############################################################################
# $Id$
#
# Description: Console front-end. Pyastra project.
# Author: Alex Ziranov <estyler _at_ users _dot_ sourceforge _dot_ net>
#    
# Copyright (c) 2004 Alex Ziranov.  All rights reserved.
#
############################################################################
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
############################################################################

#Exit codes:
# 0 - ok
# 1 - unsupported feature request
# 2 - syntax error
# 3 - hardware limitations error
# 4 - arguments error
#
#Built-in functions:
# asm - include verbatim asm text
# halt - halt the system
#

import sys, os.path, compiler, getopt
from pyastra.tree2asm import tree2asm
from pyastra.tree2tree import tree2tree
#from getopt import getopt

NFO='pyastra 0.0.1'
PROC='16f877'
procs=('16f877',)
ports=('pic14',)
ICD = 0
#
# By default optimises for size,
# but if op_speed=1 than optimises for speed.
# 
op_speed = 0

def usage():
    print """%s usage:
pyastra [options] infile [outfile]

Options:
  -m              Set the port to use (default: -m%s)
  -p              Select port specific processor (default: -m%s -p%s)
      --icd       Enable ICD support (disabled by default)
      --op-speed  Optimize for speed (for code size by default)
  -h, --help      Show this usage message and exit

Supported ports: %s
          processors: %s
""" % (NFO, ports[0], ports[0], procs[0], str(ports)[1:-1], str(procs)[1:-1])
    sys.exit(4)

print

try:
    opts, args = getopt.getopt(sys.argv[1:], 'hm:p:', ['help', 'icd', 'op-speed',])
except getopt.GetoptError:
    usage()

for o, a in opts:
    if o in ('-h', '--help'):
        usage()
        sys.exit()
    if o=='--op-speed':
        op_speed = 1
    elif o=='--idc':
        ICD = 1
    elif o=='-m':
        if a!='pic14':
            print """Curent version supports pic14 (Microchip PIC16*) only.
Please submit feature request if that port is not already in TODO:
http://sourceforge.net/tracker/?atid=643747&group_id=106265&func=browse"""
            sys.exit(4)
    elif o=='-p':
        if a in procs:
            PROC=a
        else:
            print """%s processor is not supported by the current version.
(Have you selected a correct port?)
Please submit feature request if that processor is not already in TODO:
http://sourceforge.net/tracker/?atid=643747&group_id=106265&func=browse"""
            sys.exit(4)

if not args:
    usage()

root=compiler.parseFile(sys.argv[1])

if len(sys.argv) == 2:
    out_name=os.path.splitext(sys.argv[1])[0]+'.asm'
else:
    out_name=sys.argv[2]

op=tree2tree(root)
p=tree2asm(ICD, op_speed, PROC)
p.convert(op.root)

pstr = 'Compiler has found'
ptest = 0
if p.errors:
    pstr += ' %g errors' % p.errors
if p.warnings:
    if ptest:
        pstr +=','
    pstr += '%g warnings' % p.warnings
if p.messages:
    if ptest:
        pstr +=','
    pstr += '%g messages' % p.messages

if ptest:
    print pstr+'.'

if p.errors:
    print 'No asm code generated.'
    sys.exit(1)

out=open(out_name, 'w')

out.write(""";
; Generated by %s
; infile: %s
;

\tprocessor\t%s
\t#include\tp%s.inc
        
""" % (NFO, sys.argv[1], PROC, PROC))

out.write(p.head)
out.write('\n\torg\t0x0\n')
if ICD:
    out.write('\tnop\n')
out.write("""\tgoto\tmain

\torg\t0x4
main
""")
out.write(p.body)

ftest=0
fbuf=''
for i in p.funcs:
    if not p.funcs[i][1]:
        print 'Undefined function call: %s' % i
    if p.funcs[i][3]:
        ftest=1
        fbuf+= p.funcs[i][1]
        p.instr += p.funcs[i][2]
        
out.write('\n\tgoto\t$\n')

if ftest:
    out.write("\n;\n; SUBROUTINES\n;\n\n%s" % fbuf)
    
out.write("\n\tend\n")
out.close()

l=p.ram_usage
if ICD:
    l += 1

print "Peak RAM usage: %g byte(s) (%.1f%%)" % (l, l*100/368.)
print "Program memory usage: %g word(s) (%.1f%%)" % (p.instr, p.instr*100/8192.)
if p.asm:
    print "NOTE: statistics includes data specified in asm function!"
if ICD:
    print "NOTE: statistics includes ICD memory usage!"

print
