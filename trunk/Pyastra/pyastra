#!/usr/bin/python
############################################################################
# $Id$
#
# Description: Console front-end. Pyastra project.
# Author: Alex Ziranov <estyler _at_ users _dot_ sourceforge _dot_ net>
#    
# Copyright (c) 2004 Alex Ziranov.  All rights reserved.
#
############################################################################
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
############################################################################

#Exit codes:
# 0 - ok
# 1 - unsupported feature request
# 2 - syntax error
# 3 - hardware limitations error
# 4 - arguments error
#
#Built-in functions:
# asm - include verbatim asm text
# halt - halt the system
#

import sys, os.path, compiler, getopt, pyastra.ports.pic14.procs
from pyastra.ports.pic14.tree2asm import tree2asm
from pyastra.tree2tree import tree2tree
#from getopt import getopt

NFO='pyastra 0.0.1'
ports=('pic14',)
ICD = 0
#
# By default optimises for size,
# but if op_speed=1 than optimises for speed.
# 
op_speed = 0

errors=0
warnings=0
messages=0


def usage():
    print """%s usage:
pyastra [options] infile [outfile]

Options:
  -m              Set the port to use (default: -m%s)
  -mlist          List available ports
  -p              Select port specific processor (default: -m%s -p%s)
  -plist          List supported port specific processors
      --icd       Enable ICD support (disabled by default)
      --op-speed  Optimize for speed (for code size by default)
  -h, --help      Show this usage message and exit
""" % (NFO, ports[0], ports[0], procs[0], )
    sys.exit(4)

def say(message, line=None, level=tree2asm.error, exit_status=0):
    global errors, warnings, messages
    
    if line is not None:
        print '%s: %g: %s' % (level, line, message)
    else:
        print '%s: %s' % (level, message)

    if exit_status:
        sys.exit(exit_status)
        
    if level==tree2asm.error:
        errors += 1
    elif level==tree2asm.warning:
        warnings += 1
    else:
        messages += 1
            

print """
WARNING: This is a preview release! It may (but i hope it doesn\'t) generate incorrect code.

If it really works, please inform me for which microcontroller did you used Pyastra and other thigs that may be important:
estyler (at) users (dot) sourceforge (dot) net

If you have found a bug, you are welcome to submit one:
http://sourceforge.net/tracker/?group_id=106265&atid=643744

-------
"""

procs=pyastra.ports.pic14.procs.__all__
PROC=procs[0]

try:
    opts, args = getopt.getopt(sys.argv[1:], 'hm:p:', ['help', 'icd', 'op-speed',])
except getopt.GetoptError:
    usage()

for o, a in opts:
    if o in ('-h', '--help'):
        usage()
        sys.exit()
    if o=='--op-speed':
        op_speed = 1
    elif o=='--icd':
        print 'WARNING: ICD support may be broken for some microcontrollers!'
        ICD = 1
    elif o=='-m':
        if a=='list':
            print 'Available ports: %s' % str(ports)
            sys.exit(0)
        elif a!='pic14':
            print """Curent version supports pic14 (Microchip PIC16*) only.
Please submit feature request if that port is not already in TODO:
http://sourceforge.net/tracker/?atid=643747&group_id=106265&func=browse"""
            sys.exit(4)
    elif o=='-p':
        if a=='list':
            print 'Supported %s-port specific processors: %s' % (ports[0], str(procs))
            sys.exit(0)
        elif a in procs:
            PROC=a
        else:
            print """%s processor is not supported by the current version.
(Have you selected a correct port?)
Please submit feature request if that processor is not already in TODO:
http://sourceforge.net/tracker/?atid=643747&group_id=106265&func=browse"""
            sys.exit(4)

if not args:
    usage()

root=compiler.parseFile(args[0])

if len(args) == 1:
    out_name=os.path.splitext(args[0])[0]+'.asm'
else:
    out_name=args[1]

print "Compiling from %s to %s for processor %s (port %s)..." % (
      args[0], out_name, PROC, 'pic14')

op=tree2tree(root)
p=tree2asm(ICD, op_speed, PROC, say)
p.convert(op.root)

pstr = 'Compiler has found'
ptest = 0
if errors:
    pstr += ' %g errors' % errors
if warnings:
    if ptest:
        pstr +=','
    pstr += '%g warnings' % warnings
if messages:
    if ptest:
        pstr +=','
    pstr += '%g messages' % messages

if ptest:
    print pstr+'.'

if errors:
    print 'No asm code generated.'
    sys.exit(1)

out=open(out_name, 'w')

out.write(""";
; Generated by %s
; infile: %s
;
""" % (NFO, args[0],))

out.write(p.get_asm())

out.close()

print "Peak RAM usage: %g byte(s) (%.1f%%)" % (p.ram_usage, p.ram_usage*100./p.max_ram)
print "Program memory usage: %g word(s) (%.1f%%)" % (p.instr, p.instr*100./p.max_instr)
if p.asm:
    print "NOTE: statistics includes data specified in asm function!"
if ICD:
    print "NOTE: statistics includes ICD memory usage!"

print
