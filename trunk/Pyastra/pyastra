#!/usr/bin/python
############################################################################
# $Id$
#
# Description: Console front-end. Pyastra project.
# Author: Alex Ziranov <estyler _at_ users _dot_ sourceforge _dot_ net>
#    
# Copyright (c) 2004 Alex Ziranov.  All rights reserved.
#
############################################################################
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
############################################################################
"""Pyastra command-line front-end"""
import sys, os.path, getopt, pyastralib

def select(variants):
    """Asks the user to select one of the variants"""
    print '\nPlease choose:'
    for i, v in map(None, xrange(1, len(variants)+1), variants):
        print '%i: %s' % (i, str(v))
    c=-1
    while not (0 < c < len(variants)+1):
        c=raw_input()
        try:
            c=int(c)
        except ValueError:
            pass

    return variants[c-1]

def say(message, level, line):
    """Displays errors, warnings and messages"""
    outstr=''
    if level != pyastralib.MESSAGE:
        outstr += '%s: ' % ('', 'WARNING', 'ERROR')[level]
        
    if line is not None:
        outstr += 'line %i: ' % line
        
    outstr='%s%s' % (outstr, message)
    if level < pyastralib.ERROR:
        print outstr
    else:
        sys.stderr.write(outstr+'\n')

def usage():
    """Displays the usage message"""
    print """%s usage:
pyastra_c.py [options] infile

General options:
  -m               Set the port to use
  -mlist           List available ports and exit
  -p               Select port specific processor
  -plist           List supported port specific processors and exit
  -S  --compile    Compile only, don't assemble
  -o  --output     Alternate name of output file
  -h  --help       Show this usage message and exit
      --debug      Show debug information
""" % (pyastralib.version, )
    fopts_s=''
    global fopts
    for fname in fopts.keys():
        optlist=fopts[fname]
        fopts_s += (' * %s:\n' % fname)
        for opt in optlist:
            skey=''
            lkey=''
            if opt.skey:
                skey='-%s' % opt.skey
                
            if opt.lkey:
                lkey='--%s' % opt.lkey
                
            fopts_s += '  %-3s %-12s %s\n' % (skey, lkey, opt.descr)

    if fopts_s:
        print 'Filter-specific options:'
        print fopts_s

def wrong_port(port):
    """Informs the user that he has selecten a non-existent port"""
    print """Port %s is not supported by the current version!
Please submit feature request if that port is not already in TODO:
http://sourceforge.net/tracker/?atid=643747&group_id=106265&func=browse
""" % port
    available_ports()

def available_ports():
    """Lists available ports to user"""
    print 'Available ports: %s' % str(pyastralib.get_ports())

# Print the current version to ease maintenance
print 'Welcome to %s!' % pyastralib.version
# Warn users about the developement status of Pyastra
print """
WARNING: This is a preview release! It may (but i hope it doesn\'t) generate incorrect code.

If it really works, please inform me for which microcontroller did you used Pyastra and other thigs that may be important:
estyler (at) users (dot) sourceforge (dot) net

If you have found a bug, you are welcome to submit one:
http://sourceforge.net/tracker/?group_id=106265&atid=643744

-------

"""

# Prepare some variables
out_name=None
trg_t=['asm_op', 'bin']

# Create option indices
fopts = pyastralib.get_options()
opts = pyastralib.crt_options()
options='o:hp:m:S'
long_options=['output=', 'help', 'compile', 'debug']
sopts_p={}
lopts_p=[]

for fopt in fopts.values():
    for opt in fopt:
        long_options+=[opt.lkey]
        
        lopts_p+=['--'+opt.lkey]
        if opt.skey:
            sopts_p['-'+opt.skey]=opt.lkey
            
        if opt.arg:
            long_options[-1]+='='
            
            if opt.skey:
                options+=opt.skey
                options+=':'

# Parse options
try:
    aopts, args = getopt.getopt(sys.argv[1:], options, long_options)
except getopt.GetoptError:
    usage()
    sys.exit(4)

# Module options have the highest priority
for o, a in aopts:
    if o in lopts_p:
        if a:
            opts[o[2:]]=a
        else:
            opts[o[2:]]=True
    elif o in sopts_p:
        if a:
            opts[o[1:]]=a
        else:
            opts[o[1:]]=True
    elif o in ('-h', '--help'):
        usage()
        sys.exit()
    elif o in ('-S', '--compile'):
        trg_t=['asm_op']
    elif o in ('-o', '--output'):
        out_name=os.path.splitext(a)[0]
##    elif o=='--icd':
##        opts['icd'] = True
    elif o=='-m':
        if a=='list':
            available_ports()
            sys.exit(0)
        elif a not in pyastralib.get_ports():
            wrong_port(a)
            sys.exit(4)
        else:
            opts['port']=a
             
    elif o=='-p':
        if a=='list':
            port=None
            for opt, arg in aopts:
                if opt=='-m':
                    port=arg
                    if port not in pyastralib.get_ports():
                        wrong_port(port)
                        sys.exit(4)
                    break
                    
            if not port:
                port=pyastralib.get_ports()[0]
                
            procs=pyastralib.get_procs(port)
            print '%i supported %s-port specific processors:\n%s' % (len(procs), port, str(procs))
            sys.exit(0)
        else:
            opts['proc']=a
    elif o=='--debug':
        opts['debug']=True

# Exit if there's no infile among arguments
if not args:
    usage()
    sys.exit(4)

# Check whether the given processor name exists in current port
if opts.has_key('proc'):
    if opts.has_key('port'):
        if not opts['proc'] in pyastralib.get_procs[opts['port']]:
            print """Processor %s is not supported by the current version.
Have you selected a correct port?
Please submit feature request if that processor is not already in TODO:
http://sourceforge.net/tracker/?atid=643747&group_id=106265&func=browse""" % a
            sys.exit(4)
            
# Prepare some variables
opts['infile']=args[0]

if not out_name:
    out_name=os.path.splitext(args[0])[0]

# Convert it!
c=pyastralib.Converter(args[0], select, say, trg_t, opts=opts, src_t='file')
results=c.convert()

# Display errors, warnings and messages count.
pstr = ''
if c.errors:
    pstr += ' %g error' % c.errors
    if c.errors > 1:
        pstr+='s'
if c.warnings:
    if pstr:
        pstr +=','
    pstr += '%g warning' % c.warnings
    if c.warnings > 1:
        pstr+='s'
if c.messages:
    if pstr:
        pstr +=','
    pstr += ' %g message' % c.messages
    if c.messages > 1:
        pstr+='s'

if pstr:
    print
    print 'Total:'+pstr+'.'

# Save the output of the filters
for r in results:
    f=file('%s.%s' % (out_name, r.ext), 'w')
    f.write(r.data)
    f.close()
